{"version":3,"sources":["redux/types.ts","redux/reducer.ts","sagas/apis.ts","sagas/sagas.ts","store/store.ts","App.tsx","serviceWorker.ts","index.tsx","components/Menu.tsx","components/Header.tsx","components/Footer.tsx","components/PageLayout.tsx","components/Loading.tsx","assets/logo.svg"],"names":["FoodRecipesTypes","initialState","recipes","undefined","currentRecipe","getRecipesContentReducer","currentState","action","data","payload","Object","assign","setCurrentRecipeReducer","id","filter","recipe","sys","getRecipeContentReducer","FoodRecipieReducer","type","GET_RECIPES_ASYNC","SET_CURRENT_RECIPE","GET_RECIPE_ASYNC","client","require","createClient","space","environment","accessToken","getRecipesContent","a","getEntries","content_type","select","response","body","errors","Error","items","assets","includes","Asset","entries","Entry","getRecipeContent","getEntry","console","log","getRecipeAsync","watchGetRecipe","getRecipesAsync","watchGetRecipes","root","recipeData","call","put","takeEvery","GET_RECIPE","GET_RECIPES","fork","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","RecipieListContainer","lazy","RecipieDetails","ErrorPage","App","fallback","Loading","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Menu","className","icon","faQuestionCircle","faUser","faHeart","faFacebook","faInstagram","faPinterest","faTwitter","Header","to","alt","src","logo","Footer","faCopyright","PageLayout","props","content","faSpinner","module","exports"],"mappings":"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","file":"static/js/main.9065919a.chunk.js","sourcesContent":["export enum FoodRecipesTypes {\n  GET_RECIPES = \"@@types/GET_RECIPES\",\n  GET_RECIPES_ASYNC = \"@@types/GET_RECIPES_ASYNC\",\n  GET_RECIPE = \"@@types/GET_RECIPE\",\n  GET_RECIPE_ASYNC = \"@@types/GET_RECIPE_ASYNC\",\n  SET_CURRENT_RECIPE = \"@@types/SET_CURRENT_RECIPE\"\n}\nexport interface Recipe {\n  title?: String;\n  photo?: any;\n  tags?: any;\n  chef? : any;\n  description: String;\n}\n\nexport interface RecipeItem {\n  fields: Recipe;\n  sys: any;\n}\nexport interface FoodRecipesState {\n  recipes?: Array<RecipeItem>;\n  currentRecipe?: RecipeItem;\n}\n","import { FoodRecipesState, FoodRecipesTypes } from \"./types\";\nimport { AnyAction } from \"redux\";\n\nconst initialState = {\n  recipes: undefined,\n  currentRecipe: undefined\n};\n\nconst FoodRecipieReducer = (currentState: FoodRecipesState = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case FoodRecipesTypes.GET_RECIPES_ASYNC:\n      return getRecipesContentReducer(currentState, action);\n    case FoodRecipesTypes.SET_CURRENT_RECIPE:\n      return setCurrentRecipeReducer(currentState, action);\n    case FoodRecipesTypes.GET_RECIPE_ASYNC:\n      return getRecipeContentReducer(currentState, action);\n    default:\n      return currentState;\n  }\n};\n\nfunction getRecipesContentReducer(currentState: FoodRecipesState, action: AnyAction) {\n  const data = action.payload || action.data;\n  return Object.assign({}, currentState, { recipes: data.recipes });\n}\n\nfunction setCurrentRecipeReducer(currentState: FoodRecipesState, action: AnyAction) {\n  const id = action.payload.id || action.id;\n  const currentRecipe = currentState.recipes && currentState.recipes.filter(recipe => recipe.sys.id === id)[0];\n  return Object.assign({}, currentState, { currentRecipe: currentRecipe });\n}\n\nfunction getRecipeContentReducer(currentState: FoodRecipesState, action: AnyAction) {\n  const data = action.data;\n  return Object.assign({}, currentState, { currentRecipe: data });\n}\n\nexport default FoodRecipieReducer;\n","\nconst contentful = require('contentful');\n\nconst client = contentful.createClient({\n  space: 'kk2bw5ojx476',\n  environment: 'master', \n  accessToken: '7ac531648a1b5e1dab6c18b0979f822a5aad0fe5f1109829b8a197eb2be4b84c'\n})\n\nexport async function getRecipesContent() {\n     const response = await client.getEntries({\n        content_type: 'recipe',\n        select: 'sys.id,fields.title,fields.photo,fields.tags,fields.description,fields.chef'\n     });\n     const body = await response;\n     if (response.errors) throw Error('error');\n     return {\n         recipes: body.items,\n         assets: body.includes.Asset,\n         entries: body.includes.Entry\n     };\n}\n\nexport async function getRecipeContent(id: String) {\n  const response = await client.getEntry(id, {\n    content_type: 'recipe',\n    select: 'sys.id,fields.title,fields.photo,fields.tags,fields.description,fields.chef'\n  });\n  const body = await response;\n  console.log(body);\n  if (response.errors) throw Error('error');\n  return body;\n}","import { takeEvery, put, call, fork } from 'redux-saga/effects';\nimport { FoodRecipesTypes } from '../redux/types';\nimport { getRecipesContent, getRecipeContent } from './apis';\nimport { AnyAction } from \"redux\";\n\nexport function* getRecipeAsync(recipeData: AnyAction) {\n    const data = yield call(getRecipeContent, recipeData.payload.id);\n    yield put({type: FoodRecipesTypes.GET_RECIPE_ASYNC, data});\n}\n\nfunction* watchGetRecipe() {\n    yield takeEvery(FoodRecipesTypes.GET_RECIPE, getRecipeAsync)\n}\n\nexport function* getRecipesAsync() {\n    const data = yield call(getRecipesContent);\n    yield put({type: FoodRecipesTypes.GET_RECIPES_ASYNC, data})\n}\n\nfunction* watchGetRecipes() {\n    yield takeEvery(FoodRecipesTypes.GET_RECIPES, getRecipesAsync)\n}\n\nexport default function* root() {\n    yield fork(watchGetRecipes);\n    yield fork(watchGetRecipe);\n}","import { createStore, applyMiddleware } from 'redux';\nimport FoodRecipieReducer from '../redux/reducer';\nimport initialState from '../assets/initialState.json';\nimport createSagaMiddleware from 'redux-saga';\nimport root from '../sagas/sagas';\nconst sagaMiddleware = createSagaMiddleware();\n\n\nconst store = createStore(FoodRecipieReducer, initialState, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(root);\n\nexport default store;","import React, { Suspense, lazy } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\nimport './styles/Common.scss';\n//import './styles/RecipieDetails.scss';\n\nimport Loading from './components/Loading';\n\nconst RecipieListContainer = lazy(() => import('./containers/RecipeListContainer'));\nconst RecipieDetails = lazy(() => import ('./containers/RecipeDetailsContainer'));\nconst ErrorPage = lazy(() => import ('./components/ErrorPage'));\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route exact path=\"/\" component={RecipieListContainer}></Route>\n            <Route path=\"/recipe/:id\" component={RecipieDetails}></Route>\n            <Route component={ErrorPage}></Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { faQuestionCircle, faHeart, faUser } from \"@fortawesome/free-solid-svg-icons\";\nimport {faFacebook, faInstagram, faPinterest, faTwitter} from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst Menu: React.FC = () => { \n    return(\n        <div className=\"header-menu flex flex-direction-row justify-space-between\">\n            <div className=\"main--menu\">\n            <ul className=\"flex flex-direction-row\">\n                <li><FontAwesomeIcon icon={faQuestionCircle} /></li>\n                <li><FontAwesomeIcon icon={faUser} /></li>\n                <li><FontAwesomeIcon icon={faHeart} /></li>\n            </ul>\n            </div>\n            <div className=\"main--menu flex flex-direction-row\">\n            <span>Follow us on:</span>\n            <ul className=\"flex flex-direction-row\">\n                <li><FontAwesomeIcon icon={faFacebook} /></li>\n                <li><FontAwesomeIcon icon={faInstagram} /></li>\n                <li><FontAwesomeIcon icon={faPinterest} /></li>\n                <li><FontAwesomeIcon icon={faTwitter} /></li>\n            </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default Menu;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Menu from './Menu';\nimport logo from '../assets/logo.svg';\n\nconst Header: React.FC = () => { \n    return(\n        <header>\n            <div className=\"header_ads flex justify-center flex-align-center\">\n                <span className=\"\">Recipe of the Day</span>\n                <span className=\"text-micro ad-link\">Click to follow</span>\n            </div>\n            <div><Menu /></div>\n            <div className=\"logo\"><Link to=\"/\"><img alt=\"logo\" src={logo} /></Link></div>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopyright } from '@fortawesome/free-solid-svg-icons';\n\n\nconst Footer: React.FC = () => { \n    return(\n        <footer>\n            <div className=\"recipes-footer text text-micro letter-spacing-large flex flex-align-center\">\n            <span className=\"copyright\"><FontAwesomeIcon icon={faCopyright} /> CHEF ABODE</span>\n            <span>TERMS & CONDITIONS</span>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\n\ninterface LayoutProps {\n    content: JSX.Element\n}\n\nconst PageLayout: React.FC<LayoutProps> = (props) => { \n    return (\n        <section className=\"layout\">\n            <Header></Header>\n            <main className=\"main-content\">{props.content}</main>\n            <Footer></Footer>\n        </section>\n    )\n}\n\nexport default PageLayout;\n\n","import React from 'react';\nimport PageLayout from './PageLayout';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst Loading: React.FC = () => { \n    return(\n        <PageLayout content={<span className=\"load-spin text-mega flex justify-center\"><FontAwesomeIcon className=\"fa-spin\" icon={faSpinner}></FontAwesomeIcon></span>}></PageLayout>\n    )\n}\n\nexport default Loading;","module.exports = __webpack_public_path__ + \"static/media/logo.6fd1196f.svg\";"],"sourceRoot":""}